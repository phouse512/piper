service: piper-log

provider:
  name: aws
  runtime: python3.6
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

custom:
  stage: ${opt:stage, self:provider.stage}
  tableName: piper-log-${self:custom.stage}
  logGroupName: piper-log-group
  backupLogStreamName: firehose-backup-log-${self:custom.stage}
  firehoseLogStreamName: firehose-log-${self:custom.stage}
  storageBucketArn: arn:aws:s3:::piper-log-storage
  storageBackupBucketArn: arn:aws:s3:::piper-log-storage-backup

resources:
  Resources:
    PiperLogCloudwatchLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: ${self:custom.logGroupName}
        RetentionInDays: 3653

    BackupLogStream:
      Type: AWS::Logs::LogStream
      Properties:
        LogGroupName: ${self:custom.logGroupName}
        LogStreamName: ${self:custom.backupLogStreamName}

    FirehoseLogStream:
      Type: AWS::Logs::LogStream
      Properties:
        LogGroupName: ${self:custom.logGroupName}
        LogStreamName: ${self:custom.firehoseLogStreamName}

    PiperLogFirehose:
      Type: AWS::KinesisFirehose::DeliveryStream
      Properties:
        DeliveryStreamName: piper-log-firehose-${self:custom.stage}
        DeliveryStreamType: DirectPut
        ExtendedS3DestinationConfiguration:
          BucketARN: ${self:custom.storageBucketArn}
          BufferingHints:
            IntervalInSeconds: 900
            SizeInMBs: 128
          CloudWatchLoggingOptions:
            Enabled: true
            LogGroupName: ${self:custom.logGroupName}
            LogStreamName: ${self:custom.firehoseLogStreamName}
          CompressionFormat: UNCOMPRESSED
          Prefix: v1-${self:custom.stage}/
          RoleARN:
            Fn::GetAtt: [ FirehoseMainRole, Arn]
          S3BackupMode: Enabled
          S3BackupConfiguration:
            BucketARN: ${self:custom.storageBackupBucketArn}
            BufferingHints:
              IntervalInSeconds: 900
              SizeInMBs: 128
            CloudWatchLoggingOptions:
              Enabled: true
              LogGroupName: ${self:custom.logGroupName}
              LogStreamName: firehose-backup-log-${self:custom.stage}
            Prefix: v1-${self:custom.stage}-backup/
            RoleARN:
              Fn::GetAtt: [ FirehoseBackupRole, Arn ]
            CompressionFormat: GZIP

    PiperLogTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: service
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: service
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3

    FirehoseMainRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - "firehose.amazonaws.com"
              Action:
                - "sts:AssumeRole"
              Condition:
                StringEquals:
                  sts:ExternalId: 095779082208
        Path: "/"
        Policies:
          - PolicyName: Root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "s3:AbortMultipartUpload"
                    - "s3:GetBucketLocation"
                    - "s3:GetObject"
                    - "s3:ListBucket"
                    - "s3:ListBucketMultipartUploads"
                    - "s3:PutObject"
                  Resource:
                    - ${self:custom.storageBucketArn}
                    - ${self:custom.storageBucketArn}/*
                - Effect: Allow
                  Action:
                    - "logs:PutLogEvents"
                    - "logs:CreateLogStream"
                  Resource:
                    - Fn::GetAtt: [ PiperLogCloudwatchLogGroup, Arn ]

    FirehoseBackupRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - "firehose.amazonaws.com"
              Action:
                - "sts:AssumeRole"
              Condition:
                StringEquals:
                  sts:ExternalId: 095779082208
        Path: "/"
        Policies:
          - PolicyName: Root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "s3:AbortMultipartUpload"
                    - "s3:GetBucketLocation"
                    - "s3:GetObject"
                    - "s3:ListBucket"
                    - "s3:ListBucketMultipartUploads"
                    - "s3:PutObject"
                  Resource:
                    - ${self:custom.storageBackupBucketArn}
                    - ${self:custom.storageBackupBucketArn}/*
                - Effect: Allow
                  Action:
                    - "logs:PutLogEvents"
                    - "logs:CreateLogStream"
                  Resource:
                    - Fn::GetAtt: [ PiperLogCloudwatchLogGroup, Arn ]

    ScalingRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - "application-autoscaling.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Path: "/"
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "dynamodb:DescribeTable"
                    - "dynamodb:UpdateTable"
                    - "cloudwatch:PutMetricAlarm"
                    - "cloudwatch:DescribeAlarms"
                    - "cloudwatch:GetMetricStatistics"
                    - "cloudwatch:SetAlarmState"
                    - "cloudwatch:DeleteAlarms"
                  Resource: "*"

    PiperLogWriteScalableTarget:
      Type: AWS::ApplicationAutoScaling::ScalableTarget
      Properties:
        MaxCapacity: 20
        MinCapacity: 3
        ResourceId: "table/${self:custom.tableName}"
        RoleARN:
          Fn::GetAtt: [ ScalingRole, Arn ]
        ScalableDimension: "dynamodb:table:WriteCapacityUnits"
        ServiceNamespace: dynamodb

    PiperLogWriteScalingPolicy:
      Type: AWS::ApplicationAutoScaling::ScalingPolicy
      Properties:
        PolicyName: WriteAutoScalingPolicy
        PolicyType: TargetTrackingScaling
        ScalingTargetId:
          Ref: PiperLogWriteScalableTarget
        TargetTrackingScalingPolicyConfiguration:
          TargetValue: 70
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          PredefinedMetricSpecification:
            PredefinedMetricType: DynamoDBWriteCapacityUtilization

    PiperLogReadScalableTarget:
      Type: AWS::ApplicationAutoScaling::ScalableTarget
      Properties:
        MaxCapacity: 20
        MinCapacity: 3
        ResourceId: "table/${self:custom.tableName}"
        RoleARN:
          Fn::GetAtt: [ ScalingRole, Arn ]
        ScalableDimension: "dynamodb:table:ReadCapacityUnits"
        ServiceNamespace: dynamodb

    PiperLogReadScalingPolicy:
      Type: AWS::ApplicationAutoScaling::ScalingPolicy
      Properties:
        PolicyName: ReadAutoScalingPolicy
        PolicyType: TargetTrackingScaling
        ScalingTargetId:
          Ref: PiperLogReadScalableTarget
        TargetTrackingScalingPolicyConfiguration:
          TargetValue: 70
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          PredefinedMetricSpecification:
            PredefinedMetricType: DynamoDBReadCapacityUtilization
